import math

import matplotlib.pyplot as plt

import diagramas
import numpy as np

from practica2.triangDelaunay import alphaComplejo


def imprimir_matriz(matriz):
    print(np.array(matriz))
    print("---------------------------------------------------------------------")


pi = math.pi


def PointsInCircum(r, n=100):
    return [(math.cos(2 * pi / n * x) * r, math.sin(2 * pi / n * x) * r) for x in range(0, n + 1)]


def ruido(points):
    puntos_diagrama = np.array(points)
    plt.scatter(puntos_diagrama[:, 0], puntos_diagrama[:, 1], color="blue")
    plt.plot()
    noise = np.random.normal(0, 0.1, 101)
    lista = []
    for i in range(len(points)):
        lista.append([points[i][0] + noise[i], points[i][1] + noise[i]])
    # puntos_diagrama = np.array(signal)
    lista = np.array(lista)
    plt.scatter(lista[:, 0], lista[:, 1], color="red")
    plt.show()
    return lista


# puntos = np.random.rand(100, 2)
# puntos = puntos * 10

### EJEMPLO HECTOR
# puntos = np.array([[0.12483073, 0.48058688],
#                    [0.66785431, 0.88640198],
#                    [0.7508529, 0.87369865],
#                    [0.64280474, 0.3082798],
#                    [0.5011471, 0.64743215],
#                    [0.63793728, 0.97318851]])

# puntos = np.array([[0.0, 0.0],
#                    [-1.0, 1.0],
#                    [1.0, 1.0],
#                    [-2.0, 2.0],
#                    [2.0, 2.0],
#                    [0.0, 3.0]])





# puntos = np.array([[0.509853, 0.78852273],
#                    [0.10077354, 0.0742852],
#                    [0.50058222, 0.01202338],
#                    [0.99579349, 0.64515282],
#                    [0.98456622, 0.66746461],
#                    [0.25007532, 0.38292423],
#                    [0.50138974, 0.4357195]])

# circunf de hector para probar
puntos = np.array([[3.38053849, 0.44141062],
                   [-3.67456526, -2.54618539],
                   [-4.67096227, -0.28463729],
                   [0.28607836, -5.31950028],
                   [-5.49658052, 0.81583453],
                   [3.31628777, 4.51457505],
                   [1.47902757, -4.48885477],
                   [1.99237706, -6.55890283],
                   [-5.32487209, 0.79306973],
                   [4.46224067, 2.08675513],
                   [-3.93303369, 4.3900816],
                   [-5.11542889, 1.12497231],
                   [-4.00059713, 1.40243318],
                   [3.16128972, 4.92063117],
                   [-3.40903658, 3.58873575],
                   [1.92457613, 2.31769504],
                   [-0.05850883, -6.02578648],
                   [-4.6699487, 1.01207803],
                   [1.16739517, 5.34010378],
                   [-4.03550832, 1.7681891],
                   [2.59591248, 3.78787176],
                   [-3.49691669, -2.26934604],
                   [3.73046198, 0.39239093],
                   [-5.31364828, 0.05985415],
                   [-5.03331333, -2.56892718],
                   [3.15543167, 0.9654952],
                   [1.85775748, -6.05477926],
                   [4.20618283, -3.26517992],
                   [-2.55492801, -5.63040359],
                   [1.59399619, 3.63301401],
                   [1.59564559, -5.50676048],
                   [-5.17562979, 1.53774848],
                   [-2.94020789, -5.78565392],
                   [-4.9478761, -3.83618482],
                   [-5.19109518, -3.85863704],
                   [-0.84705499, -3.13389006],
                   [0.24783828, 3.12645906],
                   [-4.84996026, 0.03799707],
                   [0.28925558, 4.9751016],
                   [-2.82371707, -3.48598555],
                   [0.06904652, 4.43697964],
                   [1.75465358, 4.34308431],
                   [-0.39117596, -4.17658892],
                   [4.25184029, -0.25731257],
                   [-0.11549651, 4.77609643],
                   [3.83724052, -2.89049096],
                   [-4.58217268, 3.72649455],
                   [-5.50018818, -0.11771178],
                   [0.46204903, -5.74262511],
                   [4.16302256, 2.9862931]])

#
#
# puntos = np.array([[0.03653114, 0.15089326],
#                    [0.15831359, 0.89080055],
#                    [0.03897906, 0.15394904],
#                    [0.8451469, 0.02852358],
#                    [0.69744539, 0.33121205],
#                    [0.94312824, 0.48085139]])
print("------------------------------------------")
print("------------------------------------------")
print("------------------------------------------")
print(puntos)
print("------------------------------------------")
print("------------------------------------------")
print("------------------------------------------")


plt.plot(puntos[:, 0], puntos[:, 1], 'ko')
plt.show()

# puntos = ruido(PointsInCircum(1))

#saco el complejo
complejo = alphaComplejo(puntos)
# ordeno los simplices por pesos
complejo.filtrationOrder()

#calculo sus diagramas
diagramas.diagrama_persistencia(complejo)
diagramas.diagrama_barras(complejo)
